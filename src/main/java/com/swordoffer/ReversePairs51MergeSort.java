package com.swordoffer;

import com.bytedance.XorNumber;

public class ReversePairs51MergeSort {

    int count = 0;
    int step = 0;

    public int reversePairsO(int[] nums) {

        int[] sortArr = new int[nums.length];
        mergeSort(nums, sortArr, 0, nums.length - 1);
        return count;
    }

    public void mergeSort(int[] nums, int[] sortArr, int beg, int end) {
        if (beg >= end) return;
        int mid = (beg + end) / 2;
        mergeSort(nums, sortArr, beg, mid);
        mergeSort(nums, sortArr, mid + 1, end);
        int i = beg, j = mid + 1, k = beg;
        while (i <= mid && j <= end) {
            ++step;
            if (nums[i] > nums[j]) {
                sortArr[k++] = nums[j++];
                this.count += mid - i + 1;
            } else {
                sortArr[k++] = nums[i++];
            }
        }
        while (i <= mid) {
            ++step;
            sortArr[k++] = nums[i++];
        }
        while (j <= end) {
            ++step;
            sortArr[k++] = nums[j++];
        }
        for (int m = beg; m < k; ++m) {
            ++step;
            nums[m] = sortArr[m];
        }
    }


    /**
     * 字典树的方式计算逆序对 只能正数
     */
    private class NumTrie{

        NumTrie[] next = new NumTrie[2];
        int count = 1;

        public void buildTrie(int[] nums) {
            for (int num : nums) {
                NumTrie trie = this;
                for (int i = 31; i >= 0; i--) {
                    int digit = (num >> i) & 1;
                    if (trie.next[1] != null && digit == 0) {
                        pairs += trie.next[1].count;
                    }
                    if (trie.next[digit] == null) trie.next[digit] = new NumTrie();
                    else ++trie.next[digit].count;
                    trie = trie.next[digit];
                }
            }
        }
    }

    private int pairs = 0;

    public int reversePairs(int[] nums) {
        NumTrie numTrie = new NumTrie();
        numTrie.buildTrie(nums);
        return pairs;
    }

    public static void main(String[] args) {

        int[] nums = {7,5,6,4};
         //int[] nums = {6,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5,9,7,10,1,2,3,4,5,5};
        ReversePairs51MergeSort sort = new ReversePairs51MergeSort();
        System.out.println(sort.reversePairs(nums));
//        System.out.println(sort.step);
    }
}
